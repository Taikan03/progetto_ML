# -*- coding: utf-8 -*-
"""ProgettoML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c-BeErZuUzcwIfyeoDnUoVbtDB4V6n7A

LIBRERIE
"""

!pip install torch torchvision torchaudio --index-url https://download.pytor
!pip install transformers==4.41.0
!pip install pyloudnorm
!pip install git+https://github.com/facebookresearch/audiocraft.git
!pip install noisereduce

"""OPERAZIONI"""

#creazione traccia audio con MusicGen
from audiocraft.models import MusicGen
from audiocraft.data.audio import audio_write
import os
import torchaudio
import librosa
import pyloudnorm as pyln

modello = MusicGen.get_pretrained('small')
modello.set_generation_params(duration=10)

traccia = modello.generate_unconditional(1)
audio_write("traccia", traccia[0], sample_rate = modello.sample_rate)

#upsampling e normalizzazione a 44.1 kHz e LUFS -14
import soundfile as sf

tr_orig, sr_orig = librosa.load("traccia.wav", sr = None)
sf.write("traccia.wav", tr_orig, sr_orig)

#upsampling
waveform, sr = torchaudio.load("traccia.wav")
resampler = torchaudio.transforms.Resample(orig_freq = sr, new_freq = 44100)
waveform_up = resampler(waveform).squeeze().numpy()
sf.write("traccia_norm.wav", waveform_up, 44100)

#normalizzazione
tr_up, sr = sf.read("traccia_norm.wav")
meter = pyln.Meter(sr)
loudness = meter.integrated_loudness(tr_up)
tr_norm = pyln.normalize.loudness(tr_up, loudness, -14.0)
sf.write("traccia_norm.wav", tr_norm, sr)

#dereverbering
import scipy.signal as signal

tr_norm, sr_norm = librosa.load("traccia_norm.wav", sr = None)
sos = signal.butter(N=4, Wn=150, btype="highpass", fs=sr_diff, output= "sos")

tr_der = signal.sosfilt(sos, tr_norm)
sf.write("traccia_der.wav", tr_der, sr)

#pulizia audio
from scipy.ndimage import median_filter

tr_dirt, sr = librosa.load("traccia_der.wav", sr=None)
tr_clean = median_filter(tr_dirt, size=3)

sf.write("traccia_clean.wav", y_clean, sr)

"""METRICHE DI CONFRONTO"""

#confronto uditivo
from IPython.display import display, Audio

print("Traccia Originale")
display(Audio("traccia.wav"))
print("Traccia Finale")
display(Audio("traccia_clean.wav"))

#confronto visivo con spettrogrammi
import librosa.display
import matplotlib.pyplot as plt

tr_og, sr_og = librosa.load("traccia.wav", sr = None)
tr_end, sr_end = librosa.load("traccia_clean.wav", sr = None)

s1 = librosa.feature.melspectrogram(y = tr_og, sr = sr_og, n_fft=2048, hop_length=512)
s1_dB = librosa.power_to_db(s1, ref=np.max)
s2 = librosa.feature.melspectrogram(y = tr_end, sr = sr_end, n_fft=2048, hop_length=512)
s2_dB = librosa.power_to_db(s2, ref=np.max)

fig, ax = plt.subplots(nrows=2, sharex=True, sharey=True, figsize=(10, 4))
librosa.display.specshow(s1_dB, hop_length=512, x_axis='time', y_axis='mel', sr=sr_og, fmax=44100, ax=ax[0])
ax[0].set_title("Traccia originale")
librosa.display.specshow(s2_dB, hop_length=512, x_axis='time', y_axis='mel', sr=sr_end, fmax=44100, ax=ax[1])
ax[1].set_title("Traccia finale")
plt.tight_layout()
plt.figure(figsize=(10, 4))
plt.show()

#Signal-to-Noise Ratio (SNR)
tr1, sr= librosa.load("traccia.wav", sr=None)
tr2, sr= librosa.load("traccia_clean.wav", sr=None)

waveform, sr = torchaudio.load("traccia.wav")
resampler = torchaudio.transforms.Resample(orig_freq = sr, new_freq = 44100)
waveform_up = resampler(waveform).squeeze().numpy()

noise = waveform_up - tr2
snr = 10 * np.log10(np.mean(tr1**2) / np.mean(noise**2))
print(f"SNR: {snr: .2f} dB")

#Log-Spectral Distance (LSD)
def compute_lsd(tr1, tr2, sr, n_fft=512, hop_length=256):
  s1 = np.abs(librosa.stft(tr1, n_fft=n_fft, hop_length=hop_length)) +1e-8
  s2 = np.abs(librosa.stft(tr2, n_fft=n_fft, hop_length=hop_length)) +1e-8

  min_cols = min(s1.shape[1], s2.shape[1])
  s1 = s1[:, :min_cols]
  s2 = s2[:, :min_cols]

  log_s1 = 20 * np.log10(s1)
  log_s2 = 20 * np.log10(s2)

  lsd = np.mean(np.sqrt(np.mean((log_s1 - log_s2)**2, axis=0)))
  return lsd

tr_1, sr1 = librosa.load("traccia.wav", sr=None)
tr_2, sr2 = librosa.load("traccia_clean.wav", sr=None)

lsd_risultato = compute_lsd(tr_1, tr_2, sr)
print(f"LSD: {lsd_risultato: .2f} dB")

!pip install pesq

#Perceprual Evaluation of Speech Quality (PESQ)
from pesq import pesq
from scipy.io import wavfile

sr_og, tr_og = wavfile.read("traccia_norm.wav")
sr_end, tr_end = wavfile.read("traccia_clean.wav")

tr_og = librosa.resample(y=tr_og.astype(np.float32), orig_sr=sr_og, target_sr=16000)
tr_end = librosa.resample(y=tr_end.astype(np.float32), orig_sr=sr_end, target_sr=16000)

pesq_risultato = pesq(16000, tr_og, tr_end, "wb")
print(f"Risultato PESQ: {pesq_risultato}")